name: Deploy Web & Mobile (CD)

on:
  workflow_run:
    workflows: ["Complete CI/CD Pipeline"]
    types:
      - completed

jobs:
  # ==========================================
  # Verify Prerequisites Job abracadabra
  # ==========================================
  verify-prerequisites:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - name: Check workflow prerequisites
        id: check
        run: |
          echo "Checking workflow: ${{ github.event.workflow_run.name }}"
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"
          
          # Only deploy if this is the CI/CD pipeline completing successfully
          if [ "${{ github.event.workflow_run.name }}" == "Complete CI/CD Pipeline" ] && [ "${{ github.event.workflow_run.conclusion }}" == "success" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "✅ Docker workflow succeeded, will proceed with deployment"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "❌ Prerequisites not met for deployment"
          fi

  # ==========================================
  # Job pour déployer la version WEB
  # ==========================================
  deploy-web:
    runs-on: ubuntu-latest
    needs: verify-prerequisites
    if: ${{ needs.verify-prerequisites.outputs.should-deploy == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Verify Docker workflow success
        run: |
          echo "Previous workflow conclusion: ${{ github.event.workflow_run.conclusion }}"
          if [ "${{ github.event.workflow_run.conclusion }}" != "success" ]; then
            echo "❌ Docker workflow failed, aborting deployment"
            exit 1
          fi
          echo "✅ Docker workflow succeeded, proceeding with deployment"
        
      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and deploy WEB version
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          echo "=== DEPLOYING WEB VERSION ==="
          # Arrêter et supprimer les conteneurs existants
          docker-compose -f docker-compose.prod.yml down app-web || true
          # Forcer la récupération de la dernière image WEB
          docker pull ${{ secrets.DOCKER_USERNAME }}/cesizen:web-latest
          # Démarrer avec la nouvelle image WEB
          docker-compose -f docker-compose.prod.yml up -d db app-web
          echo "Waiting for web service to start..."
          sleep 25

      - name: Health check WEB version
        run: |
          echo "=== TESTING WEB VERSION ==="
          # Test API
          curl --fail --retry 3 --retry-delay 5 http://localhost:5001/api || (echo "Web API failed" && docker-compose -f docker-compose.prod.yml logs app-web && exit 1)
          # Test Frontend
          curl --fail --retry 3 --retry-delay 5 -L http://localhost:5001 | grep -q "<!DOCTYPE html" || (echo "Web frontend failed" && docker-compose -f docker-compose.prod.yml logs app-web && exit 1)
          echo "✅ WEB version deployed successfully"

      - name: Tag and push WEB image
        run: |
          # L'image WEB est déjà poussée par le CI avec le bon target
          echo "✅ Using WEB image from CI: ${{ secrets.DOCKER_USERNAME }}/cesizen:web-latest"

  # ==========================================
  # Job pour déployer la version MOBILE  
  # ==========================================
  deploy-mobile:
    runs-on: ubuntu-latest
    needs: verify-prerequisites
    if: ${{ needs.verify-prerequisites.outputs.should-deploy == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and deploy MOBILE version
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          echo "=== DEPLOYING MOBILE VERSION ==="
          # Arrêter et supprimer les conteneurs existants
          docker-compose -f docker-compose.prod.yml down app-mobile || true
          # Forcer la récupération de la dernière image MOBILE
          docker pull ${{ secrets.DOCKER_USERNAME }}/cesizen:mobile-latest
          # Démarrer avec la nouvelle image MOBILE
          docker-compose -f docker-compose.prod.yml up -d db app-mobile
          echo "Waiting for mobile service to start..."
          sleep 25

      - name: Health check MOBILE version
        run: |
          echo "=== TESTING MOBILE VERSION ==="
          # Test Mobile API
          curl --fail --retry 3 --retry-delay 5 http://localhost:5002/ || (echo "Mobile API failed" && docker-compose -f docker-compose.prod.yml logs app-mobile && exit 1)
          # Test Mobile assets availability
          curl --fail --retry 3 --retry-delay 5 http://localhost:5002/mobile || (echo "Mobile assets not accessible" && docker-compose -f docker-compose.prod.yml logs app-mobile)
          echo "✅ MOBILE version deployed successfully"

      - name: Tag and push MOBILE image
        run: |
          # L'image MOBILE est déjà poussée par le CI avec le bon target
          echo "✅ Using MOBILE image from CI: ${{ secrets.DOCKER_USERNAME }}/cesizen:mobile-latest"

  # ==========================================
  # Job de synthèse (optionnel)
  # ==========================================
  deploy-summary:
    runs-on: ubuntu-latest
    needs: [deploy-web, deploy-mobile]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "=== DEPLOYMENT SUMMARY ==="
          if [[ "${{ needs.deploy-web.result }}" == "success" ]]; then
            echo "✅ WEB version deployed successfully"
          else
            echo "❌ WEB version deployment failed"
          fi
          
          if [[ "${{ needs.deploy-mobile.result }}" == "success" ]]; then
            echo "✅ MOBILE version deployed successfully"
          else
            echo "❌ MOBILE version deployment failed"
          fi
          
          echo "Both deployments completed independently"
