name: Complete CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  install-and-test:
    name: Install, Lint, Test (Backend & Frontend)
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.4
        env:
          MYSQL_DATABASE: Cesizen
          MYSQL_ROOT_PASSWORD: example
        ports:
          - 3306:3306
    env:
      DB_HOST: 127.0.0.1
      DB_USER: root
      DB_PASSWORD: example
      DB_NAME: Cesizen
      DB_PORT: 3306
      NODE_ENV: test
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Install root dependencies
        run: npm ci
      - name: Install backend dependencies
        run: npm ci
        working-directory: server
      - name: Install frontend dependencies
        run: npm ci
        working-directory: mobile
      - name: Lint backend
        run: npm run lint || true
        working-directory: server
      - name: Lint frontend
        run: npm run lint || true
        working-directory: mobile
      - name: Run backend tests
        continue-on-error: true
        run: npm test
        working-directory: server
      - name: Run frontend tests
        continue-on-error: true
        run: npm test
        working-directory: mobile
      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            server/coverage
            mobile/coverage

  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: install-and-test
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Install SonarCloud scanner
        run: npm install -g sonarqube-scanner
      - name: Run SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npx sonarqube-scanner \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.SONAR_ORG }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  # ==========================================
  # Docker Build & Validate (Only on main branch)
  # ==========================================
  docker-build:
    name: Build & Validate Docker Images
    runs-on: ubuntu-latest
    needs: [install-and-test, sonarcloud]
    if: github.ref == 'refs/heads/main'
    outputs:
      build-success: ${{ steps.build.outcome == 'success' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/cesizen:latest
          
      - name: Validate Docker Image
        run: |
          # Pull the image that was just built
          docker pull ${{ secrets.DOCKER_USERNAME }}/cesizen:latest
          # Quick validation that the image exists and can be inspected
          docker inspect ${{ secrets.DOCKER_USERNAME }}/cesizen:latest
          echo "âœ… Docker image validated successfully"
